<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
clock x;
clock y;
chan c;
int ledSender = 1;
int ledReceiver = 0;

/**
* ledSender OUT 8
* ledReceiver OUT 9
**/</declaration><template><name x="5" y="5">Sender</name><declaration>// Place local declarations here.
</declaration><location id="id0" x="-40" y="48"></location><location id="id1" x="96" y="-40"></location><location id="id2" x="-40" y="-40"></location><location id="id3" x="-168" y="-40"></location><init ref="id3"/><transition><source ref="id0"/><target ref="id3"/><label kind="assignment" x="-256" y="8">ledSender = 1, x = 0</label></transition><transition><source ref="id1"/><target ref="id0"/><label kind="guard" x="16" y="16">x &gt; 200</label></transition><transition><source ref="id2"/><target ref="id1"/><label kind="synchronisation" x="16" y="-64">c!</label><label kind="assignment" x="-24" y="-88">ledSender = 0</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="guard" x="-128" y="-64">x &gt; 50</label></transition></template><template><name>Receiver</name><location id="id4" x="-16" y="48"></location><location id="id5" x="128" y="-48"></location><location id="id6" x="-16" y="-48"></location><location id="id7" x="-152" y="-48"></location><init ref="id7"/><transition><source ref="id4"/><target ref="id7"/><label kind="assignment" x="-232" y="24">ledReceiver = 0, y = 0</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="48" y="16">y &gt; 150</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="48" y="-72">c?</label><label kind="assignment" x="-32" y="-96">ledReceiver = 1, y = 25</label></transition><transition><source ref="id7"/><target ref="id6"/><label kind="guard" x="-112" y="-72">y &gt; 25</label></transition></template><system>// Place template instantiations here.
S = Sender();
R = Receiver();

// List one or more processes to be composed into a system.
system S,R;</system></nta>